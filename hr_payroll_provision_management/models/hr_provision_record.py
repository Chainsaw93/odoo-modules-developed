from odoo import fields, models, api, _


class HrProvisionRecord(models.Model):
    _name = 'hr.x.provision.record'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _description = 'Provision for XIII'
    _rec_name = 'name'
    _order = 'provision_date desc, id desc'

    name = fields.Char(
        "Name", 
        required=True,
        default=lambda self: self.env["ir.sequence"].next_by_code("hr.x.provision.sequence") or _("New"), 
        help="Autogenerated code sequence.",
        tracking=True
    )
    contract_id = fields.Many2one(
        "hr.contract", 
        "Contract", 
        readonly=True, 
        required=True,
        states={"pending": [("readonly", False)]},
        tracking=True
    )
    employee_id = fields.Many2one(
        "hr.employee", 
        "Employee",
        related="contract_id.employee_id", 
        store=True,
        tracking=True
    )
    company_id = fields.Many2one(
        'res.company', 
        'Company', 
        index=True, 
        required=True,
        default=lambda self: self.env.company, 
        tracking=True
    )
    provision_date = fields.Date(
        'Date', 
        tracking=True, 
        readonly=True, 
        required=True,
        states={"pending": [("readonly", False)]},
        index=True
    )
    provision_amount = fields.Float(
        'Provision amount', 
        tracking=True, 
        readonly=True, 
        required=True,
        states={"pending": [("readonly", False)]}
    )
    provision_type = fields.Selection(
        [('xiii', 'XIII'), ('rf', 'Reserve funds')], 
        "Type",
        tracking=True, 
        required=True, 
        readonly=True,
        states={"pending": [("readonly", False)]},
        index=True
    )
    description = fields.Text(
        "Description", 
        readonly=True,
        states={"pending": [("readonly", False)]}
    )
    state = fields.Selection(
        [('pending', 'Pending'), ('paid', 'Paid'), ('cancelled', 'Cancelled')], 
        'State',
        readonly=True, 
        states={"pending": [("readonly", False)]},
        default="pending", 
        tracking=True,
        index=True
    )

    def set_paid(self):
        """Mark provision as paid"""
        for record in self:
            record.state = "paid"

    def set_cancelled(self):
        """Mark provision as cancelled"""
        for record in self:
            record.state = "cancelled"


class HrContract(models.Model):
    _inherit = "hr.contract"
    _description = "Contract extension to show provisions"

    @api.depends("provision_xiii_ids")
    def _compute_pending_provision(self):
        """Compute pending provision amounts"""
        for record in self:
            record.pending_provision_xiii = sum(
                record.provision_xiii_ids.filtered(
                    lambda x: x.state == "pending"
                ).mapped("provision_amount")
            )

    provision_xiii_ids = fields.One2many(
        "hr.x.provision.record", 
        "contract_id", 
        "Provisions XIII",
        readonly=True, 
        tracking=True,
        domain=[('provision_type', '=', 'xiii')]  # ‚Üê CORREGIDO: Removed state filter
    )
    pending_provision_xiii = fields.Float(
        "Pending provision XIII", 
        compute="_compute_pending_provision", 
        tracking=True,
        store=True
    )

    def get_pending_provision_xiii(self):
        """Get pending XIII provisions for this contract's employee"""
        self.ensure_one()
        return self.env["hr.x.provision.record"].search([
            ('state', '=', 'pending'), 
            ('provision_type', '=', 'xiii'),
            ('employee_id', '=', self.employee_id.id)
        ])

    def get_pending_provision_xiii_amount(self):
        """Get total pending XIII provision amount"""
        self.ensure_one()
        provisions = self.get_pending_provision_xiii()
        return sum(provisions.mapped("provision_amount"))

    def create_provision_xiii(self, amount, date, description):
        """Create new XIII provision"""
        self.ensure_one()
        provision_values = {
            "provision_type": "xiii",
            "state": "pending",
            "provision_amount": amount,
            "provision_date": date,
            "contract_id": self.id,
            "description": description,
        }
        return self.env["hr.x.provision.record"].create(provision_values)